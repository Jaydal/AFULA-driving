#ifndef SIREN_H
#define SIREN_H
#include <Arduino.h>
#include <avr/pgmspace.h>


// Melody Data
// ---------------------------------------------------------------------------- 
// The melody is stored as an array of 16 bit unsigned integers (uint16_t)  
// where each integer encodes the note, octave and duration
//  
//   [duration][octave][note]  - ddddddddoooonnnn
//
//   note (nnnn) is 4 bits which are the note to play
//    C = 0, C# = 1, D = 2, D# = 3, E = 4, F = 5,
//    F# = 6, G = 7, G# = 8, A = 9, A# = 10, B = 11,
//    SILENT = 15
//
//   octave (oooo) is 4 bits which indicate the octave to play that note in,
//   maximum octave we can handle is 8, minimum is 0
//    octave 0 = 0 .. octave 8 = 8
//    
//   duration (dddddddd) is the duration of the note to play in units of tempo
//    hold note for 10 tempos = 10
//
// You can use the following web page to create the Melody data for you:
//    http://sparks.gogo.co.nz/midi_tone.html
//
// You can also select a human readable/editable output format on that page 
// instead of this short form version.


// The melodies must be named Melody0 .. Melody{NUMBER_OF_MELODIES-1}, and 
// each must also have a MelodyX_Length defined.
#define NUMBER_OF_MELODIES 1

// Track 0 - 
static const uint16_t Melody0[] PROGMEM = { 
        0b0011110101010111, 0b0001111111111111, 0b0001111101011011, 0b0011110111111111, 
        0b0001111101100010, 0b0001111101100011, 0b0001111011111111, 0b0001111101100100, 
        0b0011111001100101, 0b0001111011111111, 0b0001111101100110, 0b0101110011111111, 
        0b0001111101100111, 0b0101110011111111, 0b1001101001101000, 0b0001111001101001, 
        0b1001101011111111, 0b0101110001101001, 0b0001111101101010, 0b0011110111111111, 
        0b0001111101101010, 0b0011110111111111, 0b0001111101101010, 0b0111101111111111, 
        0b1111011001101011, 0b0001111111111111, 0b0001111001101011, 0b0101110011111111, 
        0b0001111101101011, 0b0101110011111111, 0b0001111101101011, 0b0111101111111111, 
        0b0001111101101010, 0b1001100111111111, 0b0001111101101001, 0b0101110011111111, 
        0b0101110001101000, 0b0101110011111111, 0b0001111101100111, 0b0101110011111111, 
        0b0001111101100110, 0b1011100011111111, 0b0001111101100101, 0b0111101111111111, 
        0b0001111101100100, 0b0111101111111111, 0b0011110101100011, 0b0011110111111111, 
        0b0001111101100010, 0b0011111011111111, 0b0001111001100010, 0b0011111011111111, 
        0b0001111001100001, 0b0111101111111111, 0b0001111101100000, 0b0111101111111111, 
        0b0001111101011011, 0b0101110011111111, 0b0011110101011010, 0b0101110011111111, 
        0b0001111101011001, 0b0011111011111111, 0b0001111010000110, 0b0001111101011000, 
        0b0101110011111111, 0b0111101101010111, 0b0001111101011010, 0b0001111101011011, 
        0b0101110011111111, 0b0001111001100010, 0b0001111101100011, 0b0011111001100100, 
        0b0011110101100101, 0b0011110111111111, 0b0001111101100110, 0b0001111111111111, 
        0b0001111101100111, 0b0111101011111111, 0b0011111001101000, 0b0011110111111111, 
        0b0001111101101001, 0b1001101011111111, 0b0001111001101001, 0b0101110111111111, 
        0b0001111001101010, 0b0111101111111111, 0b0001111101101010, 0b1001100111111111, 
        0b0001111101101010, 0b0011111001101011, 0b0011110111111111, 0b0001111101101011, 
        0b0101110011111111, 0b0001111101101011, 0b0011110111111111, 0b0001111101101011, 
        0b0011110111111111, 0b0001111101101011, 0b0011110111111111, 0b0001111101101011, 
  };
static const uint16_t Melody0_Length    = sizeof( Melody0 ) / sizeof(uint16_t);





/** Play a melody.
 *
 * Provide the MelodyX and MelodyX_Length as well as a tempo for the melody to play it on 
 * tonePin (defined above).
 *
 */
#endif